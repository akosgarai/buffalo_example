package actions

import (
	"github.com/akosgarai/buffalo_example/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Administrator)
// DB Table: Plural (administrators)
// Resource: Plural (Administrators)
// Path: Plural (/administrators)
// View Template Folder: Plural (/templates/administrators/)

// AdministratorsResource is the resource for the Administrator model
type AdministratorsResource struct {
	buffalo.Resource
}

// List gets all Administrators. This function is mapped to the path
// GET /administrators
func (v AdministratorsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	administrators := &models.Administrators{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Administrators from the DB
	if err := q.All(administrators); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, administrators))
}

// Show gets the data for one Administrator. This function is mapped to
// the path GET /administrators/{administrator_id}
func (v AdministratorsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Administrator
	administrator := &models.Administrator{}

	// To find the Administrator the parameter administrator_id is used.
	if err := tx.Find(administrator, c.Param("administrator_id")); err != nil {
		return c.Error(404, err)
	}
	tx.Load(administrator)

	return c.Render(200, r.Auto(c, administrator))
}

// New renders the form for creating a new Administrator.
// This function is mapped to the path GET /administrators/new
func (v AdministratorsResource) New(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}
	// Allocate empty privileges
	privileges := &models.Privileges{}
	// Get all privs with pop
	tx.All(privileges)
	// Pass it to context
	c.Set("privileges", privileges)
	return c.Render(200, r.Auto(c, &models.Administrator{}))
}

// Create adds a Administrator to the DB. This function is mapped to the
// path POST /administrators
func (v AdministratorsResource) Create(c buffalo.Context) error {

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate empty privileges
	var privileges models.Privileges
	req := c.Request()
	if err := req.ParseForm(); err == nil {
		for k, v := range req.Form {
			if k != "privilege_id" {
				continue
			}
			for _, vv := range v {
				priv := models.Privilege{}
				err := tx.Find(&priv, vv)
				if err == nil {
					privileges = append(privileges, priv)
				}
			}
		}
	}

	// Allocate an empty Administrator
	administrator := &models.Administrator{}

	// Bind administrator to the html form elements
	if err := c.Bind(administrator); err != nil {
		return errors.WithStack(err)
	}

	// if we have privs in the request, we need to add it to the admin struct.
	if len(privileges) > 0 {
		administrator.Privs = privileges
	}

	// Validate the data from the html form
	verrs, err := administrator.Create(tx)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, administrator))
	}
	// don't need to update the admin session.
	//c.Session().Set("current_admin_id", administrator.ID)

	// If there are no errors set a success message
	c.Flash().Add("success", "Administrator was created successfully")

	// and redirect to the administrators index page
	return c.Render(201, r.Auto(c, administrator))
}

// Edit renders a edit form for a Administrator. This function is
// mapped to the path GET /administrators/{administrator_id}/edit
func (v AdministratorsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Administrator
	administrator := &models.Administrator{}

	if err := tx.Find(administrator, c.Param("administrator_id")); err != nil {
		return c.Error(404, err)
	}
	tx.Load(administrator)
	// Allocate empty privileges
	privileges := &models.Privileges{}
	// Get all privs with pop
	tx.All(privileges)
	// Pass it to context
	c.Set("privileges", privileges)

	return c.Render(200, r.Auto(c, administrator))
}

// Update changes a Administrator in the DB. This function is mapped to
// the path PUT /administrators/{administrator_id}
func (v AdministratorsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Administrator
	administrator := &models.Administrator{}

	if err := tx.Find(administrator, c.Param("administrator_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Administrator to the html form elements
	if err := c.Bind(administrator); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(administrator)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, administrator))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Administrator was updated successfully")

	// and redirect to the administrators index page
	return c.Render(200, r.Auto(c, administrator))
}

// Destroy deletes a Administrator from the DB. This function is mapped
// to the path DELETE /administrators/{administrator_id}
func (v AdministratorsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Administrator
	administrator := &models.Administrator{}

	// To find the Administrator the parameter administrator_id is used.
	if err := tx.Find(administrator, c.Param("administrator_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(administrator); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Administrator was destroyed successfully")

	// Redirect to the administrators index page
	return c.Render(200, r.Auto(c, administrator))
}

// SetCurrentAdmin attempts to find a user based on the current_admin_id
// in the session. If one is found it is set on the context.
func SetCurrentAdmin(next buffalo.Handler) buffalo.Handler {
	return func(c buffalo.Context) error {
		if uid := c.Session().Get("current_admin_id"); uid != nil {
			a := &models.Administrator{}
			tx := c.Value("tx").(*pop.Connection)
			err := tx.Find(a, uid)
			if err != nil {
				return errors.WithStack(err)
			}
			tx.Load(a)
			c.Set("current_admin", a)
		}
		return next(c)
	}
}

// AdminAuthorize require an admin be logged in before accessing a route
func AdminAuthorize(next buffalo.Handler) buffalo.Handler {
	return func(c buffalo.Context) error {
		if uid := c.Session().Get("current_admin_id"); uid == nil {
			c.Session().Set("redirectURL", c.Request().URL.String())

			err := c.Session().Save()
			if err != nil {
				return errors.WithStack(err)
			}

			c.Flash().Add("danger", "You must be authorized to see that page")
			return c.Redirect(302, "/login")
		}
		return next(c)
	}
}
